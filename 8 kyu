//Solution to problem: Can we divide it?
public static bool is_divide_by(int number, int a, int b)
{
    if (number % a == 0 && number % b == 0) {
         return true; }
    return false;
}

//Solution to problem: Two Oldest Ages
public class LargestTwo
{
  public static int[] TwoOldestAges(int[] ages)
  {
        List<int> CopyOfages = new List<int>();

        for (int i = 0; i < ages.Length; i++)
        {
            CopyOfages.Add(ages[i]);
        }

        CopyOfages.Sort();
        return new int[] { CopyOfages[CopyOfages.Count - 2], CopyOfages[CopyOfages.Count - 1] };
  }
}

//Get the mean of an array
public class Kata
{
  public static int GetAverage(int[] marks)
  {
      int sum = 0;
      int total = marks.Length;
      for(int i = 0; i < marks.Length; i++)
      {
          sum = sum + marks[i];
      }

      return sum / total;
  }
}

//Generate range of integers
using System; 
using System.Collections; 
using System.Collections.Generic; 

public class Kata
{
  public static int[] GenerateRange(int min, int max, int step)
  {
     List<int> addValues = new List<int>();
     for (int i = min; min <= max; i++)
     {
        addValues.Add(min);
        min += step;
     }
     return addValues.ToArray();
       
  }
}

//Square(n) Sum
public static class Kata
{
  public static int SquareSum(int[] n)
  { 
      int sum = 0;
      int  i = 0;
      while (i < n.Length) {
        sum = n[i] * n[i] + sum;
        i++;
      }
      return sum;
  }
}
